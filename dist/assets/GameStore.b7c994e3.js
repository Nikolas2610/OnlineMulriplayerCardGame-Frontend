import{a as m}from"./axiosUser.5ea6112f.js";import{D as w}from"./DeckType.enum.90a9c7f8.js";import{u as R,O as x,e as E}from"./index.5fcca771.js";var n=(e=>(e.ROLE="role",e.DECK="deck",e))(n||{});const o={count_cards:1,hidden:!1,deck:-1,role:-1,type:n.ROLE,toDeck:-1},d={name:"Player"},l=[{name:"Table"},{name:"Junk"}],S={name:"",description:"",auto_turn:!1,private:!1,grid_rows:1,grid_cols:1,max_players:1},r=R(),q=x("GameStore",{state:()=>({loading:!1,createGame:{game:{...S},teams:[],status:[],roles:[{...d}],hand_start_cards:[{...o}],extraDecks:[...l],selectedDecks:[]},decks:[],editGame:!1,stepForm:{value:1,loading:!1,submitted:[!1,!1,!1],change:[!1,!1,!1]},games:[],role:"user"}),getters:{getTeams:e=>e.createGame.teams,getStatus:e=>e.createGame.status,getRoles:e=>e.createGame.roles,validateEmptyDecks:e=>e.createGame.selectedDecks.length!==0},actions:{setUserRole(e){this.$state.role=e},async fetchGames(){try{this.$state.loading=!0;const{data:e}=await m.get(`${this.$state.role}/games`);this.$state.games=e,this.$state.loading=!1}catch{}},async fetchDecks(){var e,a;try{this.$state.loading=!0;const{data:s}=await m.get(this.$state.role==="user"?"deck/private-public":"admin/decks");return s.length===0&&(r.warning("First you have to create deck before create game"),E.push({name:"create-deck"})),this.$state.decks=s,this.$state.loading=!1,s}catch(s){this.$state.loading=!1,((a=(e=s==null?void 0:s.response)==null?void 0:e.data)==null?void 0:a.message)==="Error occurred while fetching decks"&&(r.warning("First you have to create deck before create game"),E.push({name:"create-deck"}))}},toggleEditGame(e){var $,g,f,u,p,G,k;this.$state.createGame.game={...this.$state.games[e]},this.$state.editGame=!this.$state.editGame,this.$state.createGame.selectedDecks=[],this.$state.stepForm.change=[!1,!1,!1];const a=($=this.$state.createGame.game.deck)==null?void 0:$.filter(t=>t.type===w.DECK).map(t=>t.id);a==null||a.forEach(t=>{t&&this.$state.createGame.selectedDecks.push(t)}),this.$state.createGame.roles=[];const s=(g=this.$state.createGame.game.roles)==null?void 0:g.map(t=>t.name);s==null||s.forEach(t=>{t&&this.$state.createGame.roles.push({name:t})}),(s==null?void 0:s.length)===0&&(this.$state.createGame.roles=[{...d}]),this.$state.createGame.teams=[];const i=(f=this.$state.createGame.game.teams)==null?void 0:f.map(t=>t.name);i==null||i.forEach(t=>{t&&this.$state.createGame.teams.push({name:t})}),this.$state.createGame.status=[];const c=(u=this.$state.createGame.game.status)==null?void 0:u.map(t=>t.name);c==null||c.forEach(t=>{t&&this.$state.createGame.status.push({name:t})}),this.$state.createGame.extraDecks=[];const h=(p=this.$state.createGame.game.deck)==null?void 0:p.filter(t=>t.type===w.EXTRA_DECK);h==null||h.forEach(t=>{t&&this.$state.createGame.extraDecks.push({name:t.name})}),(h==null?void 0:h.length)===0&&(this.$state.createGame.extraDecks=[...l]),this.$state.createGame.hand_start_cards=[],(G=this.$state.createGame.game.hand_start_cards)==null||G.forEach(t=>{var _,F,D,y,v;t&&t.deck&&((_=t.deck)==null?void 0:_.id)&&this.$state.createGame.hand_start_cards.push({count_cards:t.count_cards,deck:t.deck.id,role:(F=t.role)!=null&&F.id?(D=t.role)==null?void 0:D.id:-1,hidden:t.hidden,type:t.type,toDeck:(y=t.toDeck)!=null&&y.id?(v=t.toDeck)==null?void 0:v.id:-1})}),((k=this.$state.createGame.game.hand_start_cards)==null?void 0:k.length)===0&&(this.$state.createGame.hand_start_cards=[{...o}])},addExtraDeck(){this.$state.createGame.extraDecks.push({name:""})},deleteExtraDeck(e){this.$state.createGame.extraDecks.length>2&&(this.$state.createGame.extraDecks=this.$state.createGame.extraDecks.filter((a,s)=>s!==e))},addTeam(){this.$state.createGame.teams.push({name:""})},deleteTeam(e){this.$state.createGame.teams.length&&(this.$state.createGame.teams=this.$state.createGame.teams.filter((a,s)=>s!==e))},addRole(){this.$state.createGame.roles.push({name:""})},deleteRole(e){this.$state.createGame.roles.length>1&&(this.$state.createGame.roles=this.$state.createGame.roles.filter((a,s)=>s!==e))},addStatus(){this.$state.createGame.status.push({name:""})},deleteStatus(e){this.$state.createGame.status.length&&(this.$state.createGame.status=this.$state.createGame.status.filter((a,s)=>s!==e))},addHandStartCardsRow(){this.$state.createGame.hand_start_cards.push({...o})},deleteHandStartCardsRow(e){this.$state.createGame.hand_start_cards&&(this.$state.createGame.hand_start_cards=this.$state.createGame.hand_start_cards.filter((a,s)=>s!==e))},validateHandStartingCards(){let e=!0;return this.$state.createGame.hand_start_cards.forEach(a=>{if(a.role===-1&&a.type===n.ROLE){r.error("Role is empty"),e=!1;return}if(a.toDeck===-1&&a.type===n.DECK){r.error("To deck is empty"),e=!1;return}if(a.deck===-1){r.error("From deck is empty"),e=!1;return}}),e},validateMoreSettings(){let e=!1;return this.$state.createGame.teams.length>0&&this.$state.createGame.teams.forEach(a=>{a.name===""&&(r.error("Team name is required"),e=!0)}),this.$state.createGame.roles.length>0&&this.$state.createGame.roles.forEach(a=>{a.name===""&&(r.error("Role name is required"),e=!0)}),this.$state.createGame.status.length>0&&this.$state.createGame.status.forEach(a=>{a.name===""&&(r.error("Status name is required"),e=!0)}),this.$state.createGame.extraDecks.length>0&&this.$state.createGame.extraDecks.forEach(a=>{a.name===""&&(r.error("Extra deck name is required"),e=!0)}),!e},async _submit(){var e,a;try{switch(this.$state.stepForm.loading=!0,this.$state.stepForm.value){case 1:const s=await m.post("game",{game:this.$state.createGame.game,decks:this.$state.createGame.selectedDecks});s.status===201&&(this.$state.createGame.game=s.data,this.$state.stepForm.submitted[this.$state.stepForm.value-1]=!0,this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.change[this.$state.stepForm.value]=!0,this.$state.stepForm.value++),this.$state.stepForm.loading=!1;break;case 2:const i=await m.post("game/more-settings",{game:this.$state.createGame.game,roles:this.$state.createGame.roles,status:this.$state.createGame.status,teams:this.$state.createGame.teams,extra_decks:this.$state.createGame.extraDecks});i.status===201&&(this.$state.createGame.game=i.data,this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.value++),this.$state.stepForm.loading=!1;break;case 3:this.prepareHandStartCardsRequest(),(await m.post("game/hand-start-games",{game:this.$state.createGame.game,hand_start_cards:this.$state.createGame.hand_start_cards})).status===201&&(r.success("Game create successfully"),this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.value=1,this.clearFormData()),this.$state.stepForm.loading=!1;break;default:r.error("Something went wrong. Please try again later");break}}catch(s){this.$state.stepForm.loading=!1,r.error(s.response?(a=(e=s.response)==null?void 0:e.data)==null?void 0:a.message:"Something went wrong")}},async _update(){var e,a,s;try{switch(this.$state.stepForm.loading=!0,this.$state.stepForm.value){case 1:const i=await m.patch("game",{game:this.$state.createGame.game,decks:this.$state.createGame.selectedDecks});i.status===200&&(this.$state.createGame.game=i.data,this.$state.createGame.extraDecks=[...l],this.$state.createGame.roles=[{...d}],this.$state.createGame.hand_start_cards=(e=i.data.hand_start_cards)!=null?e:[{...o}],this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.change[this.$state.stepForm.value]=!0,this.$state.stepForm.submitted[this.$state.stepForm.value-1]=!0,this.$state.stepForm.value++),this.$state.stepForm.loading=!1;break;case 2:const c=await m.patch("game/more-settings",{game:this.$state.createGame.game,roles:this.$state.createGame.roles,status:this.$state.createGame.status,teams:this.$state.createGame.teams,extra_decks:this.$state.createGame.extraDecks});c.status===200&&(this.$state.createGame.game=c.data,this.$state.createGame.hand_start_cards=[],this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.submitted[this.$state.stepForm.value-1]=!0,this.$state.stepForm.value++),this.$state.stepForm.loading=!1;break;case 3:this.prepareHandStartCardsRequest(),(await m.patch("game/hand-start-games",{game:this.$state.createGame.game,hand_start_cards:this.$state.createGame.hand_start_cards})).status===200&&(r.success("Game updated successfully"),this.clearFormData(),this.$state.stepForm.change[this.$state.stepForm.value-1]=!1,this.$state.stepForm.value=1,this.fetchGames()),this.$state.stepForm.loading=!1;break;default:r.error("Something went wrong. Please try again later");break}}catch(i){this.$state.stepForm.loading=!1,r.error(i.response?(s=(a=i.response)==null?void 0:a.data)==null?void 0:s.message:"Something went wrong")}},prepareHandStartCardsRequest(){this.$state.createGame.hand_start_cards.forEach(e=>{e.type===n.DECK?e.role=-1:e.toDeck=-1})},async _delete(e){if(!e){r.error("Something went wrong. Please try again later");return}try{if((await m.delete(`${this.$state.role}/games`,{data:{game_id:e}})).data.affected===1){r.success("Game deleted successfully"),this.fetchGames();return}r.error("Something went wrong. Please try again later")}catch(a){a.response.data.message?r.error(a.response.data.message):r.error("Something went wrong. Please try again later")}},clearFormData(){this.$state.createGame.game={...S},this.$state.createGame.roles=[{...d}],this.$state.createGame.hand_start_cards=[{...o}],this.$state.createGame.status=[],this.$state.createGame.extraDecks=[...l],this.$state.createGame.teams=[],this.$state.createGame.selectedDecks=[],this.$state.stepForm.submitted=[!1,!1,!1],this.$state.editGame&&(this.$state.stepForm.value=1),this.$state.editGame=!1},stepFormChange(){this.$state.stepForm.change[this.$state.stepForm.value-1]=!0},unMountedDashboard(){this.$state.games=[],this.$state.decks=[]}}});export{n as H,q as u};
