import{a as N,u as v,P as D,e as k}from"./index.6223a65c.js";import{b as l}from"./helpers.8cb9edf9.js";var c=(t=>(t.WAITING="waiting",t.PLAYING="playing",t.PAUSE="pause",t.FINISH="finish",t.GAME_MASTER_EDIT="game_master_edit",t.PLAYER_LEAVE="player_leave",t.PLAYER_DISCONNECTED="player_disconnected",t))(c||{}),R=(t=>(t[t.ZERO=0]="ZERO",t[t.NINETY=90]="NINETY",t[t.ONE_EIGHTY=180]="ONE_EIGHTY",t[t.TWO_SEVENTY=270]="TWO_SEVENTY",t))(R||{}),$=(t=>(t.LEFT="left",t.RIGHT="right",t))($||{}),P=(t=>(t.UNDO="undo",t.REDO="redo",t))(P||{}),_=(t=>(t.USER="user",t.TABLE="table",t.DECK="deck",t.JUNK="junk",t))(_||{}),H=(t=>(t.ONLINE="online",t.OFFLINE="offline",t.LEAVE="leave",t.ROOM="room",t.DISCONNECT="disconnect",t))(H||{});const n=N(),u=v(),A=D("PlayerStore",{state:()=>({socket:n.getSocketId,table:null,gameMaster:!1,room:null,cards:null,dropZones:{table:[],deck:[],junk:[],user:[]},zIndex:1,clickCardId:null,deckReferences:{table:null,junk:null,user:null},refUndoHistory:[],refRedoHistory:[],refHistoryCapacity:10,rank:{notification:!1,isRankModalOpen:!1},leaverPlayer:{table:null,loading:!1}}),getters:{getExistPlayerTableDeckId:t=>{var e,s,a;return(a=(s=(e=t.table)==null?void 0:e.table_decks)==null?void 0:s.find(i=>{var r;return((r=i.user)==null?void 0:r.id)===n.user.id}))==null?void 0:a.id},getJunkTableDeckId:t=>{var e;return(e=t.dropZones.junk[0])==null?void 0:e.tableDeckId},getTableDeckId:t=>{var e;return(e=t.dropZones.table[0])==null?void 0:e.tableDeckId},getExistPlayerPlayingStatus:t=>{var e,s,a;return(a=(s=(e=t.table)==null?void 0:e.table_users)==null?void 0:s.find(i=>i.user.id===n.user.id))==null?void 0:a.playing},getExistTableUserId:t=>{var e,s,a;return(a=(s=(e=t.table)==null?void 0:e.table_users)==null?void 0:s.find(i=>i.user.id===n.user.id))==null?void 0:a.id},getTableExist:t=>{var e,s,a,i,r,d,f,h;return((s=(e=t.table)==null?void 0:e.game)==null?void 0:s.grid_cols)&&((i=(a=t.table)==null?void 0:a.game)==null?void 0:i.grid_rows)?((d=(r=t.table)==null?void 0:r.game)==null?void 0:d.grid_cols)>0&&((h=(f=t.table)==null?void 0:f.game)==null?void 0:h.grid_rows)>0:!1},getRefHistoryCapacity:t=>t.refHistoryCapacity},actions:{_joinTable(t){var e;this.$state.leaverPlayer.table&&(this.$state.leaverPlayer.loading=!0),l.emit("joinTable",{publicUrl:t,tableId:(e=this.$state.table)==null?void 0:e.id},s=>{s.error&&(this.$state.room=null,k.push({name:"lobby"}))})},async _validateTablePassword(t){return new Promise((e,s)=>{l.emit("validateTablePassword",{table:this.$state.table,password:t},a=>{a.error?s(a.error):e(a)})})},_leaveTable(){var e,s;const t=n.user.id;l.emit("leaveTable",{userId:t,tableId:(e=this.$state.table)==null?void 0:e.id,publicUrl:(s=this.$state.table)==null?void 0:s.public_url},a=>{a.socket_status===H.LEAVE&&(this.$state.leaverPlayer.table=a.table),a.error&&(this.$state.table=null,k.push({name:"lobby"}))})},_removeTable(){var t;l.emit("removeTable",{tableId:(t=this.$state.table)==null?void 0:t.id},e=>{var s;e.affected===1?(u.success(`Table ${(s=this.$state.table)==null?void 0:s.name} deleted successfully`),this.$state.table=null):u.error("Can't delete this table")})},_updateTurnTableUsers(){var t,e,s;(e=(t=this.$state.table)==null?void 0:t.table_users)==null||e.forEach((a,i)=>{a.turn=i+1}),l.emit("setTurnTableUsers",{table_users:(s=this.$state.table)==null?void 0:s.table_users,room:this.$state.room})},_setRoleTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.roles)==null?void 0:r.find(d=>d.id===t);l.emit("setRoleTableUser",{role:s,table_user:e,room:this.$state.room})},_setStatusTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.status)==null?void 0:r.find(d=>d.id===t);l.emit("setStatusTableUser",{status:s,table_user:e,room:this.$state.room})},_setTeamTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.teams)==null?void 0:r.find(d=>d.id===t);l.emit("setTeamTableUser",{team:s,table_user:e,room:this.$state.room})},getIndexTableUser(t){var e,s;return(s=(e=this.$state.table)==null?void 0:e.table_users)==null?void 0:s.map(a=>a.id).indexOf(t.id)},setGameMaster(){var t,e,s;(e=(t=this.$state.table)==null?void 0:t.game_master)!=null&&e.id&&(this.$state.gameMaster=n.user.id===((s=this.$state.table)==null?void 0:s.game_master.id))},_stopGame(){l.emit("stopGame",{table:this.$state.table,room:this.$state.room})},_newGame(){l.emit("newGame",{table:this.$state.table,room:this.$state.room})},_leaveGame(){l.emit("leaveGame",{table:this.$state.table,room:this.$state.room})},getCards(t){var e,s;if(t&&((e=this.$state.cards)==null?void 0:e.length))return(s=this.$state.cards)==null?void 0:s.filter(a=>a.table_deck.id===t)},onDrop(t,e,s,a){var i,r,d,f;if((((i=this.$state.table)==null?void 0:i.status)===c.PLAYING||((r=this.$state.table)==null?void 0:r.status)===c.GAME_MASTER_EDIT)&&t.dataTransfer){const h=JSON.parse(t.dataTransfer.getData("card")),C=parseInt(t.dataTransfer.getData("top"),10),U=parseInt(t.dataTransfer.getData("left"),10),p=parseInt(t.dataTransfer.getData("cardWidth"),10),y=parseInt(t.dataTransfer.getData("cardHeight"),10),I=(d=this.$state.dropZones[s])==null?void 0:d.find(o=>o.tableDeckId===e),E=I.element.getBoundingClientRect(),b=t.y-E.y-C,m=t.x-E.x-U,{offsetHeight:T,offsetWidth:g}=I.element;(f=this.$state.cards)==null||f.forEach(o=>{o.id===h.id&&(b>T-y?o.position_x=T-y:b<0?o.position_x=0:o.position_x=b,m>g-p?o.position_y=g-p:m<0?o.position_y=0:o.position_y=m,o.z_index=this.$state.zIndex,s==="junk"&&(o.hidden=!1),s==="user"&&this.$state.dropZones.deck.forEach(x=>{x.tableDeckId===o.table_deck.id&&(o.hidden=!0)}),e&&h.table_deck.id!==e&&(o.table_deck.id=e),this.isCardMovementInPlayerDeck(h,o)||(this.updateUndoHistory(h),this._updateCard(o)),this.$state.clickCardId=o.id,this.$state.zIndex++)})}},getTableDeckIdOfUser(t){var e,s,a;return(a=(s=(e=this.$state.table)==null?void 0:e.table_decks)==null?void 0:s.find(i=>{var r;return((r=i.user)==null?void 0:r.id)===t}))==null?void 0:a.id},updateCardHistory(t){var s,a,i;const e=(s=this.$state.cards)==null?void 0:s.findIndex(r=>r.id===t.id);e&&e>-1&&this.$state.cards&&((a=this.$state.cards)==null||a.splice(e,1),(i=this.$state.cards)==null||i.push(t))},_updateCard(t){l.emit("updateCard",{card:t,room:this.$state.room})},cardsToDeck(t,e){var s;if(t&&e){let a=50;(s=this.$state.cards)==null||s.forEach(i=>{i.table_deck.id===t&&(i.table_deck.id=e.id,e.type===_.DECK||e.type===_.JUNK?(i.position_x=0,i.position_y=0,i.rotate=0):(i.position_x=20,i.position_y=a,a+=50),this._updateCard(i))})}},toggleCardVisibility(){var t;this.$state.clickCardId&&((t=this.$state.cards)==null||t.forEach(e=>{if(e.id===this.$state.clickCardId){const s={...e};e.hidden=!e.hidden,this.updateUndoHistory(s),this._updateCard(e)}}))},rotateCard(t){var e;this.$state.clickCardId&&((e=this.$state.cards)==null||e.forEach(s=>{if(s.id===this.$state.clickCardId){const a={...s};t===$.RIGHT?s.rotate===270?s.rotate=0:s.rotate+=90:t===$.LEFT&&(s.rotate===0?s.rotate=270:s.rotate-=90),this.isCardMovementInPlayerDeck(a,s)||(this.updateUndoHistory(a),this._updateCard(s))}}))},addStatusPlayer(t){var s,a;const e=(a=(s=this.$state.table)==null?void 0:s.table_users)==null?void 0:a.find(i=>i.user.id===n.user.id);l.emit("setStatusTableUser",{status:t,table_user:e,room:this.$state.room})},setPlayingPlayer(){var t,e,s;this.getExistPlayerPlayingStatus&&this.getExistPlayerPlayingStatus,(e=(t=this.$state.table)==null?void 0:t.table_users)==null||e.forEach(a=>{a.user.id===n.user.id?a.playing=!a.playing:a.playing=!1}),l.emit("setPlayerPlaying",{table_users:(s=this.$state.table)==null?void 0:s.table_users,room:this.$state.room})},isCardHidden(){var t;if(this.$state.clickCardId){let e=!0;return(t=this.$state.cards)==null||t.forEach(s=>{s.id===this.$state.clickCardId&&(e=s.hidden)}),e}return!0},_updateTableGameStatus(t){l.emit("updateTableGameStatus",{table:this.$state.table,status:t,room:this.$state.room},e=>{e.status===200&&t===c.GAME_MASTER_EDIT&&u.success("Table is hide from other players"),e.status===200&&t===c.PLAYING&&u.success("Table is back to playing mode for all players")})},_showAllCards(){l.emit("showAllCards",{room:this.$state.room})},_removePlayer(t){var e,s;l.emit("removePlayer",{userId:t,tableId:(e=this.$state.table)==null?void 0:e.id,publicUrl:(s=this.$state.table)==null?void 0:s.public_url})},_setNextPlayer(t){var e,s;l.emit("setNextPlayer",{next_player:t,table_users:(e=this.$state.table)==null?void 0:e.table_users,room:(s=this.$state.table)==null?void 0:s.public_url})},_shuffleDeck(){var t,e,s;if(this.$state.clickCardId){const a=(e=(t=this.$state.cards)==null?void 0:t.find(i=>i.id===this.$state.clickCardId))==null?void 0:e.table_deck.id;l.emit("shuffleDeck",{table_deck_id:a,room:(s=this.$state.table)==null?void 0:s.public_url})}},resetDropZones(){this.$state.dropZones={table:[],deck:[],junk:[],user:[]}},updateUndoHistory(t,e=!1){if(this.$state.gameMaster){this.$state.refUndoHistory.length>this.getRefHistoryCapacity&&this.$state.refUndoHistory.shift();const s={...t};this.$state.refUndoHistory.push(s),e||this.removeRedoHistoryMovement()}},updateRedoHistory(t){if(this.$state.gameMaster){this.$state.refRedoHistory.length>this.getRefHistoryCapacity&&this.$state.refRedoHistory.shift();const e={...t};this.$state.refRedoHistory.push(e)}},removeRedoHistoryMovement(){this.$state.refRedoHistory.length>0&&(this.$state.refRedoHistory=[])},historyMovement(t){if(t===P.UNDO){const e=this.$state.refUndoHistory.pop();if(e){const s=this.replaceCard(e);s&&(this.isCardMovementInPlayerDeck(e,s)||(this.updateRedoHistory({...s}),this._updateCard(e)))}}else{const e=this.$state.refRedoHistory.pop();if(e){const s=this.replaceCard(e);s&&(this.isCardMovementInPlayerDeck(e,s)||(this.updateUndoHistory({...s},!0),this._updateCard(e)))}}},cardToPlayer(t){var e;if(this.$state.clickCardId){const s=(e=this.$state.cards)==null?void 0:e.find(a=>a.id===this.$state.clickCardId);s&&s.table_deck&&s.table_deck.id!==void 0&&(this.$state.clickCardId=null,s.table_deck.id=t,this.updateUndoHistory({...s}),this._updateCard(s))}},replaceCard(t){var s,a,i;const e=(s=this.$state.cards)==null?void 0:s.findIndex(r=>r.id===t.id);if(e!==void 0&&e!==-1&&e>=0){const r=(a=this.$state.cards)==null?void 0:a.splice(e,1)[0];if(r)return(i=this.$state.cards)==null||i.push(t),r}return null},isCardMovementInPlayerDeck(t,e){return t.table_deck.id===e.table_deck.id&&t.table_deck.id===this.getExistPlayerTableDeckId}}});export{P as H,$ as M,R,c as T,_ as a,A as u};
