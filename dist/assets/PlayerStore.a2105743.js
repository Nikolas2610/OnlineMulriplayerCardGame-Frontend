import{a as U,u as v,N,e as T}from"./index.e95d5f3b.js";import{b as l}from"./helpers.bd0f080e.js";var p=(t=>(t.WAITING="waiting",t.PLAYING="playing",t.PAUSE="pause",t.FINISH="finish",t.GAME_MASTER_EDIT="game_master_edit",t.PLAYER_LEAVE="player_leave",t.PLAYER_DISCONNECTED="player_disconnected",t))(p||{}),A=(t=>(t[t.ZERO=0]="ZERO",t[t.NINETY=90]="NINETY",t[t.ONE_EIGHTY=180]="ONE_EIGHTY",t[t.TWO_SEVENTY=270]="TWO_SEVENTY",t))(A||{}),E=(t=>(t.LEFT="left",t.RIGHT="right",t))(E||{}),k=(t=>(t.UNDO="undo",t.REDO="redo",t))(k||{}),u=(t=>(t.USER="user",t.TABLE="table",t.DECK="deck",t.JUNK="junk",t))(u||{}),x=(t=>(t.ONLINE="online",t.OFFLINE="offline",t.LEAVE="leave",t.ROOM="room",t.DISCONNECT="disconnect",t))(x||{});const c=U(),$=v(),D=N("PlayerStore",{state:()=>({socket:c.getSocketId,table:null,gameMaster:!1,room:null,cards:null,dropZones:{table:[],deck:[],junk:[],user:[]},zIndex:1,clickCardId:null,deckReferences:{table:null,junk:null,user:null},refUndoHistory:[],refRedoHistory:[],refHistoryCapacity:10,rank:{notification:!1,isRankModalOpen:!1},leaverPlayer:{table:null,loading:!1},isCardDetailsModalOpen:!1}),getters:{getExistPlayerTableDeckId:t=>{var e,s,a;return(a=(s=(e=t.table)==null?void 0:e.table_decks)==null?void 0:s.find(i=>{var r;return((r=i.user)==null?void 0:r.id)===c.user.id}))==null?void 0:a.id},getJunkTableDeckId:t=>{var e;return(e=t.dropZones.junk[0])==null?void 0:e.tableDeckId},getTableDeckId:t=>{var e;return(e=t.dropZones.table[0])==null?void 0:e.tableDeckId},getExistPlayerPlayingStatus:t=>{var e,s,a;return(a=(s=(e=t.table)==null?void 0:e.table_users)==null?void 0:s.find(i=>i.user.id===c.user.id))==null?void 0:a.playing},getExistTableUser:t=>{var e,s;return(s=(e=t.table)==null?void 0:e.table_users)==null?void 0:s.find(a=>a.user.id===c.user.id)},getTableExist:t=>{var e,s,a,i,r,o,h,n;return((s=(e=t.table)==null?void 0:e.game)==null?void 0:s.grid_cols)&&((i=(a=t.table)==null?void 0:a.game)==null?void 0:i.grid_rows)?((o=(r=t.table)==null?void 0:r.game)==null?void 0:o.grid_cols)>0&&((n=(h=t.table)==null?void 0:h.game)==null?void 0:n.grid_rows)>0:!1},getRefHistoryCapacity:t=>t.refHistoryCapacity,getClickedCard:t=>{var e,s;return(s=(e=t.cards)==null?void 0:e.find(a=>a.id===t.clickCardId))!=null?s:null}},actions:{_joinTable(t){var e;this.$state.leaverPlayer.table&&(this.$state.leaverPlayer.loading=!0),l.emit("joinTable",{publicUrl:t,tableId:(e=this.$state.table)==null?void 0:e.id},s=>{s.error&&(this.$state.room=null,T.push({name:"lobby"}))})},async _validateTablePassword(t){return new Promise((e,s)=>{l.emit("validateTablePassword",{table:this.$state.table,password:t},a=>{a.error?s(a.error):e(a)})})},_leaveTable(){var e,s;const t=c.user.id;l.emit("leaveTable",{userId:t,tableId:(e=this.$state.table)==null?void 0:e.id,publicUrl:(s=this.$state.table)==null?void 0:s.public_url},a=>{a.socket_status===x.LEAVE&&(this.$state.leaverPlayer.table=a.table),a.error&&(this.$state.table=null,T.push({name:"lobby"}))})},_removeTable(){var t;l.emit("removeTable",{tableId:(t=this.$state.table)==null?void 0:t.id},e=>{var s;e.affected===1?($.success(`Table ${(s=this.$state.table)==null?void 0:s.name} deleted successfully`),this.$state.table=null):$.error("Can't delete this table")})},_updateTurnTableUsers(t){var e,s;if((e=this.$state.table)!=null&&e.table_users){const a=[...(s=this.$state.table)==null?void 0:s.table_users],i=a.splice(t.moved.oldIndex,1)[0];a.splice(t.moved.newIndex,0,i),t.moved.newIndex<t.moved.oldIndex?(a[t.moved.newIndex].turn=1,a[t.moved.oldIndex].turn-=1):(a[t.moved.newIndex].turn=a[t.moved.oldIndex].turn+1,a[t.moved.oldIndex].turn+=1),a.forEach((r,o)=>{r.turn=o+1}),l.emit("setTurnTableUsers",{table_users:a,room:this.$state.room})}},_setRoleTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.roles)==null?void 0:r.find(o=>o.id===t);l.emit("setRoleTableUser",{role:s,table_user:e,room:this.$state.room})},_setStatusTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.status)==null?void 0:r.find(o=>o.id===t);l.emit("setStatusTableUser",{status:s,table_user:e,room:this.$state.room})},_setTeamTableUser(t,e){var a,i,r;const s=(r=(i=(a=this.$state.table)==null?void 0:a.game)==null?void 0:i.teams)==null?void 0:r.find(o=>o.id===t);l.emit("setTeamTableUser",{team:s,table_user:e,room:this.$state.room})},getIndexTableUser(t){var e,s;return(s=(e=this.$state.table)==null?void 0:e.table_users)==null?void 0:s.map(a=>a.id).indexOf(t.id)},setGameMaster(){var t,e,s;(e=(t=this.$state.table)==null?void 0:t.game_master)!=null&&e.id&&(this.$state.gameMaster=c.user.id===((s=this.$state.table)==null?void 0:s.game_master.id))},_stopGame(){l.emit("stopGame",{table:this.$state.table,room:this.$state.room})},_newGame(){l.emit("newGame",{table:this.$state.table,room:this.$state.room})},_exitTable(){l.emit("exitTable",{table:this.$state.table,room:this.$state.room})},getCards(t){var e,s;if(t&&((e=this.$state.cards)==null?void 0:e.length))return(s=this.$state.cards)==null?void 0:s.filter(a=>a.table_deck.id===t)},onDrop(t,e,s){var a,i,r,o,h;if((((a=this.$state.table)==null?void 0:a.status)===p.PLAYING||((i=this.$state.table)==null?void 0:i.status)===p.GAME_MASTER_EDIT)&&t.dataTransfer){const n=JSON.parse(t.dataTransfer.getData("card"));if(!((r=this.getExistTableUser)!=null&&r.playing)&&!this.gameMaster&&(n.table_deck.id!==this.getExistPlayerTableDeckId||s!==u.USER)){$.warning("Turn on your turn to be able to play");return}const y=parseInt(t.dataTransfer.getData("top"),10),I=parseInt(t.dataTransfer.getData("left"),10),b=parseInt(t.dataTransfer.getData("cardWidth"),10),f=parseInt(t.dataTransfer.getData("cardHeight"),10),m=(o=this.$state.dropZones[s])==null?void 0:o.find(d=>d.tableDeckId===e),_=m.element.getBoundingClientRect(),g=t.y-_.y-y,C=t.x-_.x-I,{offsetHeight:P,offsetWidth:H}=m.element;(h=this.$state.cards)==null||h.forEach(d=>{d.id===n.id&&(d.position_x=Math.max(0,Math.min(P-f,g)),d.position_y=Math.max(0,Math.min(H-b,C)),d.z_index=this.$state.zIndex,s===u.JUNK?d.hidden=!1:s===u.USER&&d.table_deck.type!==u.USER&&(d.hidden=!0),d.table_deck.type=s,e&&n.table_deck.id!==e&&(d.table_deck.id=e),this.isCardMovementInPlayerDeck(n,d)||(this.updateUndoHistory(n),this._updateCard(d)),this.$state.clickCardId=d.id,this.$state.zIndex++)})}},getTableDeckIdOfUser(t){var e,s,a;return(a=(s=(e=this.$state.table)==null?void 0:e.table_decks)==null?void 0:s.find(i=>{var r;return((r=i.user)==null?void 0:r.id)===t}))==null?void 0:a.id},updateCardHistory(t){var s,a,i;const e=(s=this.$state.cards)==null?void 0:s.findIndex(r=>r.id===t.id);e&&e>-1&&this.$state.cards&&((a=this.$state.cards)==null||a.splice(e,1),(i=this.$state.cards)==null||i.push(t))},_updateCard(t){l.emit("updateCard",{card:t,room:this.$state.room})},cardsToDeck(t,e){var s;if(t&&e){let a=50;(s=this.$state.cards)==null||s.forEach(i=>{i.table_deck.id===t&&(i.table_deck.id=e.id,e.type===u.DECK||e.type===u.JUNK?(i.position_x=0,i.position_y=0,i.rotate=0):(i.position_x=20,i.position_y=a,a+=50),this._updateCard(i))})}},toggleCardVisibility(){var t;this.$state.clickCardId&&this.isCardAvailableForAction()&&((t=this.$state.cards)==null||t.forEach(e=>{if(e.id===this.$state.clickCardId){const s={...e};e.hidden=!e.hidden,this.updateUndoHistory(s),this._updateCard(e)}}))},isCardAvailableForAction(){var t,e;return((t=this.getExistTableUser)==null?void 0:t.playing)||this.$state.gameMaster||((e=this.getClickedCard)==null?void 0:e.table_deck.id)===this.getExistPlayerTableDeckId},rotateCard(t){var e;this.$state.clickCardId&&this.isCardAvailableForAction()&&((e=this.$state.cards)==null||e.forEach(s=>{if(s.id===this.$state.clickCardId){const a={...s};t===E.RIGHT?s.rotate===270?s.rotate=0:s.rotate+=90:t===E.LEFT&&(s.rotate===0?s.rotate=270:s.rotate-=90),this.isCardMovementInPlayerDeck(a,s)||(this.updateUndoHistory(a),this._updateCard(s))}}))},addStatusPlayer(t){var s,a;const e=(a=(s=this.$state.table)==null?void 0:s.table_users)==null?void 0:a.find(i=>i.user.id===c.user.id);l.emit("setStatusTableUser",{status:t,table_user:e,room:this.$state.room})},setPlayingPlayer(){var s,a,i,r,o,h,n,y,I;const t=this.getExistPlayerPlayingStatus?this.getExistPlayerPlayingStatus:!1,e=(r=(s=this.table)==null?void 0:s.table_users)==null?void 0:r.map(b=>b.user.id).indexOf((i=(a=c.user)==null?void 0:a.id)!=null?i:-1);if(this.$state.table&&this.$state.table.table_users&&e!==void 0&&e!==-1){const b=e+1>=((h=(o=this.$state.table)==null?void 0:o.table_users)==null?void 0:h.length)?0:e+1;(y=(n=this.$state.table)==null?void 0:n.table_users)==null||y.forEach((f,m)=>{var _,g;m===e?f.playing=!f.playing:b===m&&t&&((g=(_=this.$state.table)==null?void 0:_.game)==null?void 0:g.auto_turn)?f.playing=!0:f.playing=!1})}l.emit("setPlayerPlaying",{table_users:(I=this.$state.table)==null?void 0:I.table_users,room:this.$state.room})},isCardHidden(){var t;if(this.$state.clickCardId){let e=!0;return(t=this.$state.cards)==null||t.forEach(s=>{s.id===this.$state.clickCardId&&(e=s.hidden)}),e}return!0},_updateTableGameStatus(t){l.emit("updateTableGameStatus",{table:this.$state.table,status:t,room:this.$state.room},e=>{e.status===200&&t===p.GAME_MASTER_EDIT&&$.success("Table is hide from other players"),e.status===200&&t===p.PLAYING&&$.success("Table is back to playing mode for all players")})},_showAllCards(){l.emit("showAllCards",{room:this.$state.room})},_removePlayer(t){var e,s;l.emit("removePlayer",{userId:t,tableId:(e=this.$state.table)==null?void 0:e.id,publicUrl:(s=this.$state.table)==null?void 0:s.public_url})},_setNextPlayer(t){var e,s;l.emit("setNextPlayer",{next_player:t,table_users:(e=this.$state.table)==null?void 0:e.table_users,room:(s=this.$state.table)==null?void 0:s.public_url})},_shuffleDeck(){var t,e,s;if(this.$state.clickCardId){const a=(e=(t=this.$state.cards)==null?void 0:t.find(i=>i.id===this.$state.clickCardId))==null?void 0:e.table_deck.id;l.emit("shuffleDeck",{table_deck_id:a,room:(s=this.$state.table)==null?void 0:s.public_url})}},resetDropZones(){this.$state.dropZones={table:[],deck:[],junk:[],user:[]}},updateUndoHistory(t,e=!1){if(this.$state.gameMaster){this.$state.refUndoHistory.length>this.getRefHistoryCapacity&&this.$state.refUndoHistory.shift();const s={...t};this.$state.refUndoHistory.push(s),e||this.removeRedoHistoryMovement()}},updateRedoHistory(t){if(this.$state.gameMaster){this.$state.refRedoHistory.length>this.getRefHistoryCapacity&&this.$state.refRedoHistory.shift();const e={...t};this.$state.refRedoHistory.push(e)}},removeRedoHistoryMovement(){this.$state.refRedoHistory.length>0&&(this.$state.refRedoHistory=[])},historyMovement(t){if(t===k.UNDO){const e=this.$state.refUndoHistory.pop();if(e){const s=this.replaceCard(e);s&&(this.isCardMovementInPlayerDeck(e,s)||(this.updateRedoHistory({...s}),this._updateCard(e)))}}else{const e=this.$state.refRedoHistory.pop();if(e){const s=this.replaceCard(e);s&&(this.isCardMovementInPlayerDeck(e,s)||(this.updateUndoHistory({...s},!0),this._updateCard(e)))}}},cardToPlayer(t){var e;if(this.$state.clickCardId&&this.isCardAvailableForAction()){const s=(e=this.$state.cards)==null?void 0:e.find(a=>a.id===this.$state.clickCardId);s&&s.table_deck&&s.table_deck.id!==void 0&&(this.$state.clickCardId=null,s.table_deck.type===u.TABLE&&(s.position_x=0,s.position_y=0),s.table_deck.id=t,this.updateUndoHistory({...s}),this._updateCard(s))}},replaceCard(t){var s,a,i;const e=(s=this.$state.cards)==null?void 0:s.findIndex(r=>r.id===t.id);if(e!==void 0&&e!==-1&&e>=0){const r=(a=this.$state.cards)==null?void 0:a.splice(e,1)[0];if(r)return(i=this.$state.cards)==null||i.push(t),r}return null},isCardMovementInPlayerDeck(t,e){return t.table_deck.id===e.table_deck.id&&t.table_deck.id===this.getExistPlayerTableDeckId}}});export{k as H,E as M,A as R,x as S,p as T,u as a,D as u};
